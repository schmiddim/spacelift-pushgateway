package api

import (
	"reflect"
	"testing"
)

func getTestData() []byte {
	jsonData := []byte(`{
	  "branch": "master",
  "projectRoot": "stacks/foo-prod",
		"commit": {
			"author": "hansihamster",
			"hash": "e9ea5a543fce1b2d52207153f2d580431933b927",
			"message": "Update terraform"
		},
		"repository": {
			"name": "foo-repo",
			"url": "https://github.com/foo/bar"
		}
	}`)
	return jsonData
}

func TestFail(t *testing.T) {
	fields := []string{"branch"}
	extractor := NewExtractor(fields)
	jsonData := []byte(`{}=`)
	_, err := extractor.Extract(jsonData)

	if err == nil {
		t.Errorf("Expected error")
	}
}
func TestEmpty(t *testing.T) {
	fields := []string{"branch"}
	extractor := NewExtractor(fields)
	jsonData := []byte(`{}`)
	result, err := extractor.Extract(jsonData)
	if err != nil {
		t.Fatalf("ExtractData returned an error: %v", err)
	}
	expected := map[string]string{}
	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Expected %v, but got %v", expected, result)
	}
}

func TestSimpleExtractor(t *testing.T) {
	fields := []string{"branch"}
	extractor := NewExtractor(fields)
	expected := map[string]string{
		"branch": "master",
	}

	result, err := extractor.Extract(getTestData())
	if err != nil {
		t.Fatalf("ExtractData returned an error: %v", err)
	}

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Expected %v, but got %v", expected, result)
	}
}

// /////////////////
func TestExtractData_NestedMapFields(t *testing.T) {
	jsonData := []byte(`{
		"commit": {
			"author": "hansihamster",
			"hash": "e9ea5a543fce1b2d52207153f2d580431933b927",
			"message": "Update terraform"
		},
		"repository": {
			"name": "foo-repo",
			"url": "https://github.com/foo/bar"
		}
  "labels": [
    "class:platform",
    "environment:prod",
    "feature:enable_log_timestamps",
    "feature:ignore_runtime_config",
    "folder:terraform/services/foo",
    "owner:infra",
    "product:infra",
    "region:dehh",
    "space:stable-terraform-prod",
    "spacelift:stable",
    "stack:foo",
    "tool:terraform",
    "tool:terragrunt"
  ],
	}`)

	// Der Extractor ben√∂tigt hier den Zugriff auf verschachtelte Felder wie "commit.author" oder "repository.url"
	extractor := NewExtractor([]string{"commit.author", "commit.hash", "commit.message", "repository.name", "repository.url"})

	expected := map[string]string{
		"commit.author":   "hansihamster",
		"commit.hash":     "e9ea5a543fce1b2d52207153f2d580431933b927",
		"commit.message":  "Update terraform",
		"repository.name": "foo-repo",
		"repository.url":  "https://github.com/foo/bar",
	}

	result, err := extractor.Extract(jsonData)
	if err != nil {
		t.Fatalf("ExtractData returned an error: %v", err)
	}

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Expected %v, but got %v", expected, result)
	}
}

func TestExtractData_MixedFields(t *testing.T) {
	jsonData := []byte(`{
		"branch": "master",
		"commit": {
			"author": "hansihamster",
			"hash": "e9ea5a543fce1b2d52207153f2d580431933b927"
		},
		"labels": [
			"region:dehh",
			"environment:prod"
		]
	}`)

	// Hier sollen sowohl Felder aus einer map als auch aus einem Array extrahiert werden
	extractor := NewExtractor([]string{"branch", "commit.author", "commit.hash", "labels"})

	expected := map[string]string{
		"branch":             "master",
		"commit.author":      "hansihamster",
		"commit.hash":        "e9ea5a543fce1b2d52207153f2d580431933b927",
		"labels.region":      "dehh",
		"labels.environment": "prod",
	}

	result, err := extractor.Extract(jsonData)
	if err != nil {
		t.Fatalf("ExtractData returned an error: %v", err)
	}

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Expected %v, but got %v", expected, result)
	}
}
